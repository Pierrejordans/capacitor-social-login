{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface InitializeOptions {\r\n\r\n  google?: {\r\n    /**\r\n     * The app's client ID, found and created in the Google Developers Console.\r\n     * Required for iOS platform.\r\n     * @example xxxxxx-xxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\r\n     * @since 3.1.0\r\n     */\r\n    iOSClientId?: string;\r\n    /**\r\n     * The app's server client ID, required for offline mode on iOS.\r\n     * Should be the same value as webClientId.\r\n     * Found and created in the Google Developers Console.\r\n     * @example xxxxxx-xxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\r\n     * @since 3.1.0\r\n     */\r\n    iOSServerClientId?: string;\r\n    /**\r\n     * The app's web client ID, found and created in the Google Developers Console.\r\n     * Required for Android and Web platforms.\r\n     * @example xxxxxx-xxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\r\n     * @since 3.1.0\r\n     */\r\n    webClientId?: string;\r\n    /**\r\n     * The login mode, can be online or offline.\r\n     * - online: Returns user profile data and access tokens (default)\r\n     * - offline: Returns only serverAuthCode for backend authentication, no user profile data\r\n     * Note: offline mode requires iOSServerClientId to be set on iOS\r\n     * @example offline\r\n     * @since 3.1.0\r\n     */\r\n    mode?: 'online' | 'offline';\r\n    /**\r\n     * Filter visible accounts by hosted domain\r\n     * @description filter visible accounts by hosted domain\r\n     */\r\n    hostedDomain?: string;\r\n    /**\r\n     * Google Redirect URL, should be your backend url that is configured in your google app\r\n     */\r\n    redirectUrl?: string;\r\n  };\r\n  apple?: {\r\n    /**\r\n     * Apple Client ID, provided by Apple for web and Android\r\n     */\r\n    clientId?: string;\r\n    /**\r\n     * Apple Redirect URL, should be your backend url that is configured in your apple app\r\n     *\r\n     * **Note**: Use empty string `''` for iOS to prevent redirect.\r\n     * **Note**: Not required when using Broadcast Channel mode on Android.\r\n     */\r\n    redirectUrl?: string;\r\n    /**\r\n     * Use proper token exchange for Apple Sign-In\r\n     * @description Controls how Apple Sign-In tokens are handled and what gets returned:\r\n     *\r\n     * **When `true` (Recommended for new implementations):**\r\n     * - Exchanges authorization code for proper access tokens via Apple's token endpoint\r\n     * - `idToken`: JWT containing user identity information (email, name, user ID)\r\n     * - `accessToken.token`: Proper access token from Apple (short-lived, ~1 hour)\r\n     * - `authorizationCode`: Raw authorization code for backend token exchange\r\n     *\r\n     * **When `false` (Default - Legacy mode):**\r\n     * - Uses authorization code directly as access token for backward compatibility\r\n     * - `idToken`: JWT containing user identity information (email, name, user ID)\r\n     * - `accessToken.token`: The authorization code itself (not a real access token)\r\n     * - `authorizationCode`: undefined\r\n     *\r\n     * @default false\r\n     * @example\r\n     * // Enable proper token exchange (recommended)\r\n     * useProperTokenExchange: true\r\n     * // Result: idToken=JWT, accessToken=real_token, authorizationCode=present\r\n     *\r\n     * // Legacy mode (backward compatibility)\r\n     * useProperTokenExchange: false\r\n     * // Result: idToken=JWT, accessToken=auth_code, authorizationCode=undefined\r\n     */\r\n    useProperTokenExchange?: boolean;\r\n    /**\r\n     * Use Broadcast Channel for Android Apple Sign-In (Recommended)\r\n     * @description When enabled, Android uses Broadcast Channel API instead of URL redirects.\r\n     * This eliminates the need for redirect URL configuration and server-side setup.\r\n     *\r\n     * **Benefits:**\r\n     * - No redirect URL configuration required\r\n     * - No backend server needed for Android\r\n     * - Simpler setup and more reliable communication\r\n     * - Direct client-server communication via Broadcast Channel\r\n     *\r\n     * **When `true`:**\r\n     * - Uses Broadcast Channel for authentication flow\r\n     * - `redirectUrl` is ignored\r\n     * - Requires Broadcast Channel compatible backend or direct token handling\r\n     *\r\n     * **When `false` (Default - Legacy mode):**\r\n     * - Uses traditional URL redirect flow\r\n     * - Requires `redirectUrl` configuration\r\n     * - Requires backend server for token exchange\r\n     *\r\n     * @default false\r\n     * @since 7.10.0\r\n     * @example\r\n     * // Enable Broadcast Channel mode (recommended for new Android implementations)\r\n     * useBroadcastChannel: true\r\n     * // Result: Simplified setup, no redirect URL needed\r\n     *\r\n     * // Legacy mode (backward compatibility)\r\n     * useBroadcastChannel: false\r\n     * // Result: Traditional URL redirect flow with server-side setup\r\n     */\r\n    useBroadcastChannel?: boolean;\r\n  };\r\n}\r\n\r\n\r\nexport interface GoogleLoginOptions {\r\n  /**\r\n   * Specifies the scopes required for accessing Google APIs\r\n   * The default is defined in the configuration.\r\n   * @example [\"profile\", \"email\"]\r\n   * @see [Google OAuth2 Scopes](https://developers.google.com/identity/protocols/oauth2/scopes)\r\n   */\r\n  scopes?: string[];\r\n  /**\r\n   * Nonce\r\n   * @description nonce\r\n   */\r\n  nonce?: string;\r\n  /**\r\n   * Force refresh token (only for Android)\r\n   * @description force refresh token\r\n   * @default false\r\n   */\r\n  forceRefreshToken?: boolean;\r\n  /**\r\n   * Force account selection prompt (iOS)\r\n   * @description forces the account selection prompt to appear on iOS\r\n   * @default false\r\n   */\r\n  forcePrompt?: boolean;\r\n  /**\r\n   * Style\r\n   * @description style\r\n   * @default 'standard'\r\n   */\r\n  style?: 'bottom' | 'standard';\r\n  /**\r\n   * Filter by authorized accounts (Android only)\r\n   * @description Only show accounts that have previously been used to sign in to the app.\r\n   * This option is only available for the 'bottom' style.\r\n   * Note: For Family Link supervised accounts, this should be set to false.\r\n   * @default true\r\n   */\r\n  filterByAuthorizedAccounts?: boolean;\r\n  /**\r\n   * Auto select enabled (Android only)\r\n   * @description Automatically select the account if only one Google account is available.\r\n   * This option is only available for the 'bottom' style.\r\n   * @default false\r\n   */\r\n  autoSelectEnabled?: boolean;\r\n}\r\n\r\nexport interface GoogleLoginResponseOnline {\r\n  accessToken: AccessToken | null;\r\n  idToken: string | null;\r\n  profile: {\r\n    email: string | null;\r\n    familyName: string | null;\r\n    givenName: string | null;\r\n    id: string | null;\r\n    name: string | null;\r\n    imageUrl: string | null;\r\n  };\r\n  responseType: 'online';\r\n}\r\n\r\nexport interface GoogleLoginResponseOffline {\r\n  serverAuthCode: string;\r\n  responseType: 'offline';\r\n}\r\n\r\nexport type GoogleLoginResponse = GoogleLoginResponseOnline | GoogleLoginResponseOffline;\r\n\r\nexport interface AppleProviderOptions {\r\n  /**\r\n   * Scopes\r\n   * @description An array of scopes to request during login\r\n   * @example [\"name\", \"email\"]\r\n   * default: [\"name\", \"email\"]\r\n   */\r\n  scopes?: string[];\r\n  /**\r\n   * Nonce\r\n   * @description nonce\r\n   */\r\n  nonce?: string;\r\n  /**\r\n   * State\r\n   * @description state\r\n   */\r\n  state?: string;\r\n  /**\r\n   * Use Broadcast Channel for authentication flow\r\n   * @description When enabled, uses Broadcast Channel API for communication instead of URL redirects.\r\n   * Only applicable on platforms that support Broadcast Channel (Android).\r\n   * @default false\r\n   */\r\n  useBroadcastChannel?: boolean;\r\n}\r\n\r\nexport interface AppleProviderResponse {\r\n  /**\r\n   * Access token from Apple\r\n   * @description Content depends on `useProperTokenExchange` setting:\r\n   * - When `useProperTokenExchange: true`: Real access token from Apple (~1 hour validity)\r\n   * - When `useProperTokenExchange: false`: Contains authorization code as token (legacy mode)\r\n   * Use `idToken` for user authentication, `accessToken` for API calls when properly exchanged.\r\n   */\r\n  accessToken: AccessToken | null;\r\n\r\n  /**\r\n   * Identity token (JWT) from Apple\r\n   * @description Always contains the JWT with user identity information including:\r\n   * - User ID (sub claim)\r\n   * - Email (if user granted permission)\r\n   * - Name components (if user granted permission)\r\n   * - Email verification status\r\n   * This is the primary token for user authentication and should be verified on your backend.\r\n   */\r\n  idToken: string | null;\r\n\r\n  /**\r\n   * User profile information\r\n   * @description Basic user profile data extracted from the identity token and Apple response:\r\n   * - `user`: Apple's user identifier (sub claim from idToken)\r\n   * - `email`: User's email address (if permission granted)\r\n   * - `givenName`: User's first name (if permission granted)\r\n   * - `familyName`: User's last name (if permission granted)\r\n   */\r\n  profile: {\r\n    user: string;\r\n    email: string | null;\r\n    givenName: string | null;\r\n    familyName: string | null;\r\n  };\r\n\r\n  /**\r\n   * Authorization code for proper token exchange (when useProperTokenExchange is enabled)\r\n   * @description Only present when `useProperTokenExchange` is `true`. This code should be exchanged\r\n   * for proper access tokens on your backend using Apple's token endpoint. Use this for secure\r\n   * server-side token validation and to obtain refresh tokens.\r\n   * @see https://developer.apple.com/documentation/sign_in_with_apple/tokenresponse\r\n   */\r\n  authorizationCode?: string;\r\n}\r\n\r\nexport type LoginOptions =\r\n  | {\r\n      provider: 'google';\r\n      options: GoogleLoginOptions;\r\n    }\r\n  | {\r\n      provider: 'apple';\r\n      options: AppleProviderOptions;\r\n    };\r\n\r\nexport type LoginResult =\r\n  | {\r\n      provider: 'google';\r\n      result: GoogleLoginResponse;\r\n    }\r\n  | {\r\n      provider: 'apple';\r\n      result: AppleProviderResponse;\r\n    };\r\n\r\nexport interface AccessToken {\r\n  applicationId?: string;\r\n  declinedPermissions?: string[];\r\n  expires?: string;\r\n  isExpired?: boolean;\r\n  lastRefresh?: string;\r\n  permissions?: string[];\r\n  token: string;\r\n  refreshToken?: string;\r\n  userId?: string;\r\n}\r\n\r\n\r\nexport interface AuthorizationCode {\r\n  /**\r\n   * Jwt\r\n   * @description A JSON web token\r\n   */\r\n  jwt?: string;\r\n  /**\r\n   * Access Token\r\n   * @description An access token\r\n   */\r\n  accessToken?: string;\r\n}\r\n\r\nexport interface AuthorizationCodeOptions {\r\n  /**\r\n   * Provider\r\n   * @description Provider for the authorization code\r\n   */\r\n  provider: 'apple' | 'google';\r\n}\r\n\r\nexport interface isLoggedInOptions {\r\n  /**\r\n   * Provider\r\n   * @description Provider for the isLoggedIn\r\n   */\r\n  provider: 'apple' | 'google';\r\n}\r\n\r\n// Define the provider-specific call types\r\nexport type ProviderSpecificCall = never;\r\n\r\n// Map call strings to their options and response types\r\nexport type ProviderSpecificCallOptionsMap = Record<string, never>;\r\n\r\nexport type ProviderSpecificCallResponseMap = Record<string, never>;\r\n\r\n// Add a helper type to map providers to their response types\r\nexport type ProviderResponseMap = {\r\n  google: GoogleLoginResponse;\r\n  apple: AppleProviderResponse;\r\n};\r\n\r\nexport interface SocialLoginPlugin {\r\n  /**\r\n   * Initialize the plugin\r\n   * @description initialize the plugin with the required options\r\n   */\r\n  initialize(options: InitializeOptions): Promise<void>;\r\n  /**\r\n   * Login with the selected provider\r\n   * @description login with the selected provider\r\n   */\r\n  login<T extends LoginOptions['provider']>(\r\n    options: Extract<LoginOptions, { provider: T }>,\r\n  ): Promise<{ provider: T; result: ProviderResponseMap[T] }>;\r\n  /**\r\n   * Logout\r\n   * @description logout the user\r\n   */\r\n  logout(options: { provider: 'apple' | 'google' }): Promise<void>;\r\n  /**\r\n   * IsLoggedIn\r\n   * @description logout the user\r\n   */\r\n  isLoggedIn(options: isLoggedInOptions): Promise<{ isLoggedIn: boolean }>;\r\n\r\n  /**\r\n   * Get the current access token\r\n   * @description get the current access token\r\n   */\r\n  getAuthorizationCode(options: AuthorizationCodeOptions): Promise<AuthorizationCode>;\r\n  /**\r\n   * Refresh the access token\r\n   * @description refresh the access token\r\n   */\r\n  refresh(options: LoginOptions): Promise<void>;\r\n\r\n  /**\r\n   * Execute provider-specific calls\r\n   * @description Execute a provider-specific functionality\r\n   */\r\n  providerSpecificCall<T extends ProviderSpecificCall>(options: {\r\n    call: T;\r\n    options: ProviderSpecificCallOptionsMap[T];\r\n  }): Promise<ProviderSpecificCallResponseMap[T]>;\r\n}\r\n"]}