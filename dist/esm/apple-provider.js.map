{"version":3,"file":"apple-provider.js","sourceRoot":"","sources":["../../src/apple-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseSocialLogin } from './base';\r\nimport type { AppleProviderOptions, AppleProviderResponse, AuthorizationCode, LoginResult } from './definitions';\r\n\r\ndeclare const AppleID: any;\r\n\r\nexport class AppleSocialLogin extends BaseSocialLogin {\r\n  private clientId: string | null = null;\r\n  private redirectUrl: string | null = null;\r\n  private scriptLoaded = false;\r\n  private scriptUrl = 'https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js';\r\n  private useProperTokenExchange = false;\r\n\r\n  async initialize(\r\n    clientId: string | null,\r\n    redirectUrl: string | null | undefined,\r\n    useProperTokenExchange = false,\r\n  ): Promise<void> {\r\n    this.clientId = clientId;\r\n    this.redirectUrl = redirectUrl || null;\r\n    this.useProperTokenExchange = useProperTokenExchange;\r\n\r\n    if (clientId) {\r\n      await this.loadAppleScript();\r\n    }\r\n  }\r\n\r\n  async login(options: AppleProviderOptions): Promise<LoginResult> {\r\n    if (!this.clientId) {\r\n      throw new Error('Apple Client ID not set. Call initialize() first.');\r\n    }\r\n\r\n    if (!this.scriptLoaded) {\r\n      throw new Error('Apple Sign-In script not loaded.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      AppleID.auth.init({\r\n        clientId: this.clientId!,\r\n        scope: options.scopes?.join(' ') || 'name email',\r\n        redirectURI: this.redirectUrl || window.location.href,\r\n        state: options.state,\r\n        nonce: options.nonce,\r\n        usePopup: true,\r\n      });\r\n\r\n      AppleID.auth\r\n        .signIn()\r\n        .then((res: any) => {\r\n          let accessToken: { token: string } | null = null;\r\n\r\n          if (this.useProperTokenExchange) {\r\n            // When using proper token exchange, the authorization code should be exchanged\r\n            // for a proper access token on the backend. For now, we set accessToken to null\r\n            // and provide the authorization code in a separate field for backend processing.\r\n            accessToken = null;\r\n          } else {\r\n            // Legacy behavior: use authorization code as access token for backward compatibility\r\n            accessToken = {\r\n              token: res.authorization.code || '',\r\n            };\r\n          }\r\n\r\n          const result: AppleProviderResponse = {\r\n            profile: {\r\n              user: res.user || '',\r\n              email: res.user?.email || null,\r\n              givenName: res.user?.name?.firstName || null,\r\n              familyName: res.user?.name?.lastName || null,\r\n            },\r\n            accessToken: accessToken,\r\n            idToken: res.authorization.id_token || null,\r\n            // Add authorization code for proper token exchange when flag is enabled\r\n            ...(this.useProperTokenExchange && { authorizationCode: res.authorization.code }),\r\n          };\r\n          resolve({ provider: 'apple', result });\r\n        })\r\n        .catch((error: any) => {\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    // Apple doesn't provide a logout method for web\r\n    console.log('Apple logout: Session should be managed on the client side');\r\n  }\r\n\r\n  async isLoggedIn(): Promise<{ isLoggedIn: boolean }> {\r\n    // Apple doesn't provide a method to check login status on web\r\n    console.log('Apple login status should be managed on the client side');\r\n    return { isLoggedIn: false };\r\n  }\r\n\r\n  async getAuthorizationCode(): Promise<AuthorizationCode> {\r\n    // Apple authorization code should be obtained during login\r\n    console.log('Apple authorization code should be stored during login');\r\n    throw new Error('Apple authorization code not available');\r\n  }\r\n\r\n  async refresh(): Promise<void> {\r\n    // Apple doesn't provide a refresh method for web\r\n    console.log('Apple refresh not available on web');\r\n  }\r\n\r\n  private async loadAppleScript(): Promise<void> {\r\n    if (this.scriptLoaded) return;\r\n\r\n    return this.loadScript(this.scriptUrl).then(() => {\r\n      this.scriptLoaded = true;\r\n    });\r\n  }\r\n}\r\n"]}